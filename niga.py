import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text
import os

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
API_TOKEN = '8007023701:AAGCd6yqWYOy4va7DkYQegb5iFy9v6FVQdI'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('dating.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY,
                    name TEXT,
                    age INTEGER,
                    gender TEXT,
                    preference TEXT,
                    bio TEXT,
                    photos TEXT)''')

cursor.execute('''CREATE TABLE IF NOT EXISTS likes (
                    liker_id INTEGER,
                    liked_id INTEGER,
                    status TEXT)''')
conn.commit()

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    user_id = message.from_user.id
    cursor.execute("SELECT id FROM users WHERE id=?", (user_id,))
    user = cursor.fetchone()

    if user:
        await message.reply("–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –î–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º –∞–Ω–∫–µ—Ç—ã.")
    else:
        await message.reply("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å —Ç–≤–æ–µ–π –∞–Ω–∫–µ—Ç—ã. –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
        await bot.send_message(user_id, "–£–∫–∞–∂–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:")

@dp.message_handler(lambda message: message.text.isdigit())
async def set_age(message: types.Message):
    age = int(message.text)
    user_id = message.from_user.id

    cursor.execute("INSERT OR IGNORE INTO users (id, age) VALUES (?, ?)", (user_id, age))
    conn.commit()

    await message.reply("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª (–ú/–ñ):")

@dp.message_handler(lambda message: message.text.lower() in ['–º', '–∂'])
async def set_gender(message: types.Message):
    gender = message.text.lower()
    user_id = message.from_user.id

    cursor.execute("UPDATE users SET gender=? WHERE id=?", (gender, user_id))
    conn.commit()

    await message.reply("–ö–∞–∫–æ–π –ø–æ–ª —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏? (–ú/–ñ):")

@dp.message_handler(lambda message: message.text.lower() in ['–º', '–∂'])
async def set_preference(message: types.Message):
    preference = message.text.lower()
    user_id = message.from_user.id

    cursor.execute("UPDATE users SET preference=? WHERE id=?", (preference, user_id))
    conn.commit()

    await message.reply("–¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ:")

@dp.message_handler(lambda message: len(message.text) > 0)
async def set_bio(message: types.Message):
    bio = message.text
    user_id = message.from_user.id

    cursor.execute("UPDATE users SET bio=? WHERE id=?", (bio, user_id))
    conn.commit()

    await message.reply("–¢—ã –º–æ–∂–µ—à—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –¥–æ 3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –∏—Ö —Å—é–¥–∞:")

@dp.message_handler(content_types=['photo'])
async def handle_photos(message: types.Message):
    user_id = message.from_user.id
    photos = message.photo[-1].file_id  # –ü–æ–ª—É—á–∞–µ–º ID —Å–∞–º–æ–π –±–æ–ª—å—à–æ–π –≤–µ—Ä—Å–∏–∏ —Ñ–æ—Ç–æ

    cursor.execute("SELECT photos FROM users WHERE id=?", (user_id,))
    existing_photos = cursor.fetchone()[0] or ""

    if len(existing_photos.split(",")) < 3:
        new_photos = existing_photos + "," + photos if existing_photos else photos
        cursor.execute("UPDATE users SET photos=? WHERE id=?", (new_photos, user_id))
        conn.commit()

        await message.reply("–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    else:
        await message.reply("–¢—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª 3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∫–µ—Ç
@dp.message_handler(commands=['search'])
async def search_profiles(message: types.Message):
    user_id = message.from_user.id
    cursor.execute("SELECT preference FROM users WHERE id=?", (user_id,))
    preference = cursor.fetchone()[0]

    cursor.execute("SELECT id, name, age, bio FROM users WHERE gender=? AND id!=?", (preference, user_id))
    profiles = cursor.fetchall()

    if profiles:
        for profile in profiles:
            buttons = InlineKeyboardMarkup(row_width=3)
            buttons.add(
                InlineKeyboardButton("‚ù§", callback_data=f"like_{profile[0]}"),
                InlineKeyboardButton("üëé", callback_data=f"dislike_{profile[0]}"),
                InlineKeyboardButton("üí¨", callback_data=f"message_{profile[0]}")
            )
            await bot.send_message(user_id, f"–ò–º—è: {profile[1]}\n–í–æ–∑—Ä–∞—Å—Ç: {profile[2]}\n–û —Å–µ–±–µ: {profile[3]}", reply_markup=buttons)
    else:
        await message.reply("–ê–Ω–∫–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∞–π–∫–æ–≤/–¥–∏–∑–ª–∞–π–∫–æ–≤
@dp.callback_query_handler(lambda call: call.data.startswith('like_') or call.data.startswith('dislike_'))
async def handle_like_dislike(call: types.CallbackQuery):
    action, liked_id = call.data.split('_')
    liker_id = call.from_user.id

    if action == "like":
        cursor.execute("INSERT INTO likes (liker_id, liked_id, status) VALUES (?, ?, 'like')", (liker_id, liked_id))
        conn.commit()
        await call.message.reply("–¢—ã –ª–∞–π–∫–Ω—É–ª(–∞) –∞–Ω–∫–µ—Ç—É!")
    elif action == "dislike":
        await call.message.reply("–¢—ã –¥–∏–∑–ª–∞–π–∫–Ω—É–ª(–∞) –∞–Ω–∫–µ—Ç—É.")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∑–∞–∏–º–Ω–æ–≥–æ –ª–∞–π–∫–∞
    cursor.execute("SELECT * FROM likes WHERE liker_id=? AND liked_id=? AND status='like'", (liked_id, liker_id))
    mutual_like = cursor.fetchone()
    
    if mutual_like:
        cursor.execute("SELECT name FROM users WHERE id=?", (liked_id,))
        liked_user_name = cursor.fetchone()[0]
        await bot.send_message(liker_id, f"–í–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫! –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ {liked_user_name}: @{liked_user_name}")
        await bot.send_message(liked_id, f"{call.from_user.full_name} –ª–∞–π–∫–Ω—É–ª(–∞) —Ç–µ–±—è! –í–æ—Ç –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å: @{call.from_user.username}")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
